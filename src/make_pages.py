# generate_asset_pages.py
import json
from pathlib import Path
from html import escape

INPUT = Path("site_data/elements.json")
OUTDIR = Path("assets")

def is_edge(e): return "source" in e.get("data", {}) and "target" in e.get("data", {})
def is_group(e): return e.get("data", {}).get("type") == "group"
def is_asset(e): return (not is_edge(e)) and (not is_group(e)) and "id" in e.get("data", {})

def pre(txt):
    if not txt: return "<em>No description.</em>"
    return f"<pre>{escape(txt)}</pre>"

def columns_table(cols):
    if not cols: return "<p><em>No column metadata.</em></p>"
    rows = []
    for c in cols:
        name = escape(str(c.get("name","")))
        typ = escape(str(c.get("type","")))
        desc = escape(str(c.get("description","")))
        rows.append(f"<tr><td><code>{name}</code></td><td>{typ}</td><td>{desc}</td></tr>")
    return (
        "<table class='cols'>"
        "<thead><tr><th>Column</th><th>Type</th><th>Description</th></tr></thead>"
        "<tbody>" + "".join(rows) + "</tbody></table>"
    )

def link_for(asset_id, assets):
    node = assets.get(asset_id)
    if not node:
        return escape(asset_id)
    label = node.get("label", asset_id)
    url = node.get("url", f"{asset_id}.html")
    print(f"url: {url}")
    return f'<a href="{escape(url)}">{escape(label)}</a>'

def links_list(ids, assets):
    if not ids: return "<p><em>None.</em></p>"
    items = "".join(f"<li>{link_for(i, assets)}</li>" for i in sorted(set(ids)))
    return f"<ul>{items}</ul>"

def page_html(title, group_name, group_color, desc_html, cols_html, upstream_html, downstream_html):
    chip = f"<span class='chip' style='background:{escape(group_color)}'></span>" if group_color else ""
    group_block = f"<div class='group'>Group: {chip}<span class='gname'>{escape(group_name or '')}</span></div>" if group_name else ""
    return f"""<!doctype html>
    <html lang="en"><head>
    <meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">
    <title>{escape(title)}</title>
    <style>
    :root {{ --muted:#475569; --border:#e2e8f0; --link:#2563eb; }}
    body {{ font-family: system-ui, -apple-system, Segoe UI, Roboto, Inter, sans-serif; margin:0; }}
    .wrap {{ position: relative; max-width:900px; margin:32px auto; padding:0 16px 64px; }}
    .back-button {{
        position: absolute;
        top: 0;
        right: 16px;
        padding: 6px 12px;
        border: 1px solid var(--border);
        border-radius: 8px;
        background: #fff;
    }}
    h1 {{ font-size:28px; margin:0 0 8px; }}
    .group {{ color:var(--muted); display:flex; align-items:center; gap:8px; margin-bottom:24px; }}
    .chip {{ width:12px; height:12px; border-radius:50%; display:inline-block; border:1px solid rgba(0,0,0,.08); }}
    .card {{ border:1px solid var(--border); border-radius:12px; padding:16px; margin:16px 0; background:#f8fafc; }}
    .card h2 {{ margin:0 0 8px; font-size:18px; }}
    pre {{ white-space:pre-wrap; background:#0b1020; color:#e6edf3; border-radius:10px; padding:12px; overflow:auto; }}
    table.cols {{ width:100%; border-collapse:collapse; }}
    table.cols th, table.cols td {{ padding:8px 10px; border-bottom:1px solid var(--border); text-align:left; vertical-align:top; }}
    table.cols th {{ background:#eef2f7; }}
    a {{ color:var(--link); text-decoration:none; }} a:hover {{ text-decoration:underline; }}
    .muted {{ color:var(--muted); }}
    </style>
    </head><body>
    <div class="wrap">
    <a href="../index.html" class="back-button">‚Üê Back to Index</a>
    <h1>{escape(title)}</h1>
    {group_block}
    <div class="card"><h2>Description</h2>{desc_html}</div>
    <div class="card"><h2>Columns</h2>{cols_html}</div>
    <div class="card"><h2>Upstream dependencies</h2>{upstream_html}</div>
    <div class="card"><h2>Downstream dependents</h2>{downstream_html}</div>
    <p class="muted">Generated by generate_asset_pages.py</p>
    </div>
    </body></html>"""

# --- main (assume everything is set) ---
payload = json.loads(INPUT.read_text(encoding="utf-8"))
elements = payload["elements"]

# Collect assets and groups/colors
assets = {}
group_color = {}
for e in elements:
    if is_asset(e):
        d = e["data"]
        aid = d["id"]
        assets[aid] = {
            "id": aid,
            "label": d.get("label", aid),
            "group": d.get("group", ""),
            "color": d.get("color", ""),
            "description": d.get("description", ""),
            "columns": d.get("columns", []),
            "url": f"{aid}.html",
        }
        if d.get("group") and d.get("color"):
            group_color[d["group"]] = d["color"]
    elif is_group(e):
        label = e["data"].get("label")
        if label not in group_color:
            group_color[label] = ""

# Build upstream / downstream maps
upstream = {aid: [] for aid in assets}
downstream = {aid: [] for aid in assets}
for e in elements:
    if is_edge(e):
        d = e["data"]
        s, t = d["source"], d["target"]
        if s in assets and t in assets:
            downstream[s].append(t)
            upstream[t].append(s)

# Write pages
OUTDIR.mkdir(parents=True, exist_ok=True)
for aid, node in assets.items():
    title = node["label"]
    gname = node.get("group","")
    gcolor = group_color.get(gname, "")
    desc_html = pre(node.get("description",""))
    cols_html = columns_table(node.get("columns", []))
    up_html = links_list(upstream.get(aid, []), assets)
    down_html = links_list(downstream.get(aid, []), assets)
    html = page_html(title, gname, gcolor, desc_html, cols_html, up_html, down_html)

    filename = Path(node["url"]).name  # keep links like "assets/{id}.html" working
    (OUTDIR / filename).write_text(html, encoding="utf-8")

print(f"OK: wrote {len(assets)} pages to {OUTDIR}")
